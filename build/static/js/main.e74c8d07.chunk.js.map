{"version":3,"sources":["logo.svg","components/Converter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Converter","state","currencies","base","amount","convertTo","result","handleSelect","e","setState","target","name","value","calculate","handleInput","date","isNaN","fetch","then","res","json","data","rates","toFixed","handleSwap","preventDefault","this","className","class","type","onChange","map","currency","key","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,mKCwI5BC,G,kNApIbC,MAAQ,CACNC,WAAY,CAAC,MAAO,MAAO,OAC3BC,KAAM,MACNC,OAAQ,GACRC,UAAW,MACXC,OAAQ,I,EAGVC,aAAe,SAAAC,GAAM,IAAD,EAClB,EAAKC,UAAL,mBAEKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,OAF9B,uBAGY,MAHZ,GAKE,EAAKC,Y,EAITC,YAAc,SAAAN,GACZ,EAAKC,SACH,CACEL,OAAQI,EAAEE,OAAOE,MACjBN,OAAQ,KACRS,KAAM,MAER,EAAKF,Y,EAITA,UAAY,WACV,IAAMT,EAAS,EAAKH,MAAMG,OACtBA,IAAWY,OAGbC,MAAM,+CAAD,OAAgD,EAAKhB,MAAME,OAC7De,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMN,EAAOM,EAAKN,KACZT,GAAUe,EAAKC,MAAM,EAAKrB,MAAMI,WAAaD,GAAQmB,QAAQ,GACnE,EAAKd,SAAS,CACZH,SACAS,a,EAMVS,WAAa,SAAAhB,GACX,IAAML,EAAO,EAAKF,MAAME,KAClBE,EAAY,EAAKJ,MAAMI,UAC7BG,EAAEiB,iBACF,EAAKhB,SACH,CACEJ,UAAWF,EACXA,KAAME,EACNC,OAAQ,MAEV,EAAKO,Y,uDAIC,IAAD,EACuDa,KAAKzB,MAA3DC,EADD,EACCA,WAAYC,EADb,EACaA,KAAMC,EADnB,EACmBA,OAAQC,EAD3B,EAC2BA,UAAWC,EADtC,EACsCA,OADtC,EAC8CS,KACrD,OACE,yBAAKY,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,kBACf,yBAAKC,MAAM,UACT,gEAGA,yBAAKD,UAAU,OACb,yBAAKA,UAAU,aACb,0BAAMA,UAAU,oBAChB,yCACE,2BACEE,KAAK,SACLjB,MAAOR,EACP0B,SAAUJ,KAAKZ,YACfa,UAAU,sCAEZ,4BACEhB,KAAK,OACLC,MAAOT,EACP2B,SAAUJ,KAAKnB,aACfoB,UAAU,gCAETzB,EAAW6B,KAAI,SAAAC,GAAQ,OACtB,4BAAQC,IAAKD,EAAUpB,MAAOoB,GAC3BA,OAIP,wBAAIE,QAASR,KAAKF,WAAYG,UAAU,QAAxC,UAGA,4BACEhB,KAAK,YACLC,MAAOP,EACPyB,SAAUJ,KAAKnB,aACfoB,UAAU,gCAEVzB,EAAW6B,KAAI,SAAAC,GAAQ,OACrB,4BAAQC,IAAKD,EAAUpB,MAAOoB,GAC3BA,UAQb,4BACG5B,EADH,IACYD,EADZ,MAGA,4BACc,KAAXC,EACG,IACW,OAAXE,EACA,iBACAA,EAAQ,IACXD,W,GA3HO8B,cCUTC,MARf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCIcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e74c8d07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Converter extends Component {\n  state = {\n    currencies: [\"EUR\", \"USD\", \"CHF\"],\n    base: \"EUR\",\n    amount: \"\",\n    convertTo: \"USD\",\n    result: \"\"\n  };\n\n  handleSelect = e => {\n    this.setState(\n      {\n        [e.target.name]: e.target.value,\n        result: null\n      },\n      this.calculate\n    );\n  };\n\n  handleInput = e => {\n    this.setState(\n      {\n        amount: e.target.value,\n        result: null,\n        date: null\n      },\n      this.calculate\n    );\n  };\n\n  calculate = () => {\n    const amount = this.state.amount;\n    if (amount === isNaN) {\n      return;\n    } else {\n      fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.base}`)\n        .then(res => res.json())\n        .then(data => {\n          const date = data.date;\n          const result = (data.rates[this.state.convertTo] * amount).toFixed(4);\n          this.setState({\n            result,\n            date\n          });\n        });\n    }\n  };\n\n  handleSwap = e => {\n    const base = this.state.base;\n    const convertTo = this.state.convertTo;\n    e.preventDefault();\n    this.setState(\n      {\n        convertTo: base,\n        base: convertTo,\n        result: null\n      },\n      this.calculate\n    );\n  };\n\n  render() {\n    const { currencies, base, amount, convertTo, result, date } = this.state;\n    return (\n      <div className=\"container my-5\">\n        <div className=\"row\">\n          <div className=\"col-lg-6 mx-auto\">\n            <div className=\"card card-body\">\n            <div class=\"header\">\n              <h1>Convert currencies in real time</h1>\n            </div>\n             \n              <div className=\"row\">\n                <div className=\"col-lg-10\">\n                  <form className=\"form-inline mb-4\">\n                  <label>Amount</label>\n                    <input\n                      type=\"number\"\n                      value={amount}\n                      onChange={this.handleInput}\n                      className=\"form-control form-control-lg mx-3\"\n                    />\n                    <select\n                      name=\"base\"\n                      value={base}\n                      onChange={this.handleSelect}\n                      className=\"form-control form-control-lg\"\n                    >\n                      {currencies.map(currency => (\n                        <option key={currency} value={currency}>\n                          {currency}\n                        </option>\n                      ))}\n                    </select>\n                    <h1 onClick={this.handleSwap} className=\"swap\">\n                  &#x21cb;\n                  </h1>\n                    <select\n                      name=\"convertTo\"\n                      value={convertTo}\n                      onChange={this.handleSelect}\n                      className=\"form-control form-control-lg\">\n                      {\n                      currencies.map(currency => (\n                        <option key={currency} value={currency}>\n                          {currency}\n                        </option>\n                      ))\n                      }\n                    </select>\n                  </form>\n                </div>\n              </div>\n              <h5>\n                {amount} {base} =\n              </h5>\n              <h2>\n                {amount === \"\"\n                  ? \"0\"\n                  : result === null\n                  ? \"Calculating...\"\n                  : result}{\" \"}\n                {convertTo}\n              </h2>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Converter;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Converter from './components/Converter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}